{"version":3,"sources":["utils/queue.js","App.js","utils/formatDate.js","utils/generetaRandom.js","index.js"],"names":["queue","running","taskQueue","push","task","runTask","length","shift","enqueueTask","App","generateLog","name","timeout","date","Date","getHours","getMinutes","getSeconds","getDate","getMonth","getFullYear","addLog","next","logs","state","randomNumber","min","max","random","Math","floor","generetaRandom","setTimeout","setState","onAddTaskToQueue","taskRunner","resetLogs","this","className","type","onClick","map","log","Component","ReactDOM","render","document","getElementById"],"mappings":"8PAAaA,EAAQ,WACnB,IAAIC,EAAU,EACRC,EAAY,GAelB,MAAO,CACLC,KAAM,SAAAC,GAAI,OAAKH,EAAU,EAdX,SAAVI,EAAWD,GACfH,IAEAG,GAAK,WACHH,IACIC,EAAUI,OAAS,GACrBD,EAAQH,EAAUK,YAQOF,CAAQD,GAHnB,SAAAA,GAAI,OAAIF,EAAUC,KAAKC,GAGII,CAAYJ,MCmE9CK,G,kBA9Eb,aAAe,IAAD,8BACZ,+CAQFC,YAAc,SAACC,EAAMC,GAAP,iBChBWC,EDgBsB,IAAIC,KChB3B,UACrBD,EAAKE,WADgB,YACFF,EAAKG,aADH,YACmBH,EAAKI,aADxB,YACwCJ,EAAKK,UAD7C,YAC0DL,EAAKM,WAAa,EAD5E,YACiFN,EAAKO,gBDehG,cAAkDT,EAAlD,6BAA2EC,EAA3E,aChBU,IAACC,GDOX,EAWdQ,OAAS,SAACV,EAAMW,GAAU,IAChBC,EAAS,EAAKC,MAAdD,KACFE,EEpBoB,SAACC,EAAKC,GAClC,IAAMC,EAASF,EAAMG,KAAKD,UAAYD,EAAM,EAAID,GAChD,OAAOG,KAAKC,MAAMF,GFkBKG,CAAe,EAAG,IAEvCC,YAAW,WACT,EAAKC,SACH,CAAEV,KAAK,GAAD,mBAAMA,GAAN,CAAY,EAAKb,YAAYC,EAAMc,OACzC,kBAAMH,SAEQ,IAAfG,IApBS,EAuBdS,iBAAmB,SAACvB,GAAD,OACjB,EAAKwB,WAAWhC,MAAK,SAAAmB,GAAI,OAAKX,EAAO,EAAKU,OAAOV,EAAMW,GAAQ,EAAKc,UAAUd,OAxBlE,EA2Bdc,UAAY,SAAAd,GAAI,OAAI,EAAKW,SAAS,CAAEV,KAAM,KAAM,kBAAMD,QAzBpD,EAAKE,MAAQ,CAAED,KAAM,IAFT,E,iFAMZc,KAAKF,WAAanC,M,+BAuBV,IAAD,OACCuB,EAASc,KAAKb,MAAdD,KAER,OACE,yBAAKe,UAAU,OACb,yBAAKA,UAAU,sCACb,4BACEC,KAAK,SACLC,QAAS,kBAAM,EAAKN,iBAAiB,aACrCI,UAAU,eAHZ,YAOA,4BACEC,KAAK,SACLC,QAAS,kBAAM,EAAKN,iBAAiB,aACrCI,UAAU,eAHZ,YAOA,4BACEC,KAAK,SACLC,QAAS,kBAAM,EAAKN,iBAAiB,aACrCI,UAAU,eAHZ,aAQF,yBAAKA,UAAU,aACZf,EAAKkB,KAAI,SAAAC,GAAG,OACX,uBAAGJ,UAAU,YACVI,OAIP,yBAAKJ,UAAU,kCACb,4BACEC,KAAK,SACLC,QAAS,kBAAM,EAAKN,oBACpBI,UAAU,eAHZ,e,GAlEQK,cGAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.8446c8ba.chunk.js","sourcesContent":["export const queue = () => {\n  let running = 0;\n  const taskQueue = [];\n\n  const runTask = (task) => {\n    running++;\n\n    task(() => {\n      running--;\n      if (taskQueue.length > 0) {\n        runTask(taskQueue.shift());\n      }\n    });\n  };\n\n  const enqueueTask = task => taskQueue.push(task);\n\n  return {\n    push: task => (running < 1 ? runTask(task) : enqueueTask(task)),\n  };\n};\n","import React, { Component } from 'react';\n\nimport { generetaRandom, queue, formatDate } from './utils';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { logs: [] };\n  }\n\n  componentDidMount() {\n    this.taskRunner = queue();\n  }\n\n  generateLog = (name, timeout) => `${formatDate(new Date())} : ${name} was pressed with ${timeout}s timeout`;\n\n  addLog = (name, next) => {\n    const { logs } = this.state;\n    const randomNumber = generetaRandom(1, 10);\n\n    setTimeout(() => {\n      this.setState(\n        { logs: [...logs, this.generateLog(name, randomNumber)] },\n        () => next(),\n      );\n    }, randomNumber * 1000);\n  }\n\n  onAddTaskToQueue = (name) => (\n    this.taskRunner.push(next => (name ? this.addLog(name, next) : this.resetLogs(next)))\n  );\n\n  resetLogs = next => this.setState({ logs: [] }, () => next());\n\n  render() {\n    const { logs } = this.state;\n\n    return (\n      <div className=\"app\">\n        <div className=\"app__buttons app__buttons--between\">\n          <button\n            type=\"button\"\n            onClick={() => this.onAddTaskToQueue('Button 1')}\n            className=\"app__button\"\n          >\n            Button 1\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => this.onAddTaskToQueue('Button 2')}\n            className=\"app__button\"\n          >\n            Button 2\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => this.onAddTaskToQueue('Button 3')}\n            className=\"app__button\"\n          >\n            Button 3\n          </button>\n        </div>\n        <div className=\"app__logs\">\n          {logs.map(log => (\n            <p className=\"app__log\">\n              {log}\n            </p>\n          ))}\n        </div>\n        <div className=\"app__buttons app__buttons--end\">\n          <button\n            type=\"button\"\n            onClick={() => this.onAddTaskToQueue()}\n            className=\"app__button\"\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const formatDate = (date) => (\n  `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} ${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\n);\n","export const generetaRandom = (min, max) => {\n  const random = min + Math.random() * (max + 1 - min);\n  return Math.floor(random);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}